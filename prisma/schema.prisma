generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  username  String  @unique
  email     String? @unique
  password  String?
  phone     String? @unique
  avatar    String?
  github_id Int?    @unique

  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  SmsToken   SmsToken[]
  Product    Product[]
  Post       Post[]
  Like       Like[]
  Comment    Comment[]
}

model SmsToken {
  id    Int    @id @default(autoincrement())
  token String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique
}

model Product {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  price       Float
  photo       String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Post {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  views       Int     @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  Like    Like[]
  Comment Comment[]
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@id(name: "id", [userId, postId])
}

model Comment {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}
